# immediate operand offset access Part
# ld.b
:ld.b i16_imm5_rz, (i16_imm5_rx, i16_imm5_imm) is i16_optype = 0b10 & i16_3op = 0b000 & i16_imm5_rx & i16_imm5_rz & i16_imm5_imm {
    i16_imm5_rz = *:1 (i16_imm5_rx+i16_imm5_imm);
}
# ld.h
:ld.h i16_imm5_rz, (i16_imm5_rx, disp) is i16_optype = 0b10 & i16_3op = 0b001 & i16_imm5_rx & i16_imm5_rz & i16_imm5_imm [disp = (i16_imm5_imm<<1);] {
    i16_imm5_rz = *:2 (i16_imm5_rx+disp);
}
# ld.w
:ld.w i16_imm5_rz, (i16_imm5_rx, disp) is i16_optype = 0b10 & i16_3op = 0b010 & i16_imm5_rx & i16_imm5_rz & i16_imm5_imm [disp = (i16_imm5_imm<<2);] {
    i16_imm5_rz = *:4 (i16_imm5_rx+disp);
}
# ld.w (sp)
:ld.w i16_imm5_rz, (sp, disp) is i16_optype = 0b10 & i16_3op = 0b011 & i16_imm5_imm3 & i16_imm5_rz & i16_imm5_imm & sp [disp = (((i16_imm5_imm3<<5)+i16_imm5_imm)<<2);] {
    i16_imm5_rz = *:4 (sp+disp);
}
# st.b
:st.b i16_imm5_rz, (i16_imm5_rx, i16_imm5_imm) is i16_optype = 0b10 & i16_3op = 0b100 & i16_imm5_rx & i16_imm5_rz & i16_imm5_imm {
    *:1 (i16_imm5_rx+i16_imm5_imm) = i16_imm5_rz:1;
}
# st.h
:st.h i16_imm5_rz, (i16_imm5_rx, disp) is i16_optype = 0b10 & i16_3op = 0b101 & i16_imm5_rx & i16_imm5_rz & i16_imm5_imm [disp = (i16_imm5_imm<<1);] {
    *:2 (i16_imm5_rx+disp) = i16_imm5_rz:2;
}
# st.w
:st.w i16_imm5_rz, (i16_imm5_rx, disp) is i16_optype = 0b10 & i16_3op = 0b110 & i16_imm5_rx & i16_imm5_rz & i16_imm5_imm [disp = (i16_imm5_imm<<2);] {
    *:4 (i16_imm5_rx+disp) = i16_imm5_rz;
}
# st.w (sp)
:st.w i16_imm5_rz, (sp, disp) is i16_optype = 0b10 & i16_3op = 0b111 & i16_imm5_imm3 & i16_imm5_rz & i16_imm5_imm & sp [disp = (((i16_imm5_imm3<<5)+i16_imm5_imm)<<2);] {
    *:4 (sp+disp) = i16_imm5_rz;
}

# multi-register access Part

push16list: is i16_bit_0003 = 0x0 {}
push16list: r4 is i16_bit_0003 = 0x1 & r4 {push(r4);}
push16list: {r4,r5} is i16_bit_0003 = 0x2 & r4 & r5 {push(r4); push(r5);}
push16list: {r4,r5,r6} is i16_bit_0003 = 0x3 & r4 & r5 & r6 {push(r4); push(r5); push(r6);}
push16list: {r4,r5,r6,r7} is i16_bit_0003 = 0x4 & r4 & r5 & r6 & r7 {push(r4); push(r5); push(r6); push(r7);}
push16list: {r4,r5,r6,r7,r8} is i16_bit_0003 = 0x5 & r4 & r5 & r6 & r7 & r8 {push(r4); push(r5); push(r6); push(r7); push(r8);}
push16list: {r4,r5,r6,r7,r8,r9} is i16_bit_0003 = 0x6 & r4 & r5 & r6 & r7 & r8 & r9 {push(r4); push(r5); push(r6); push(r7); push(r8); push(r9);}
push16list: {r4,r5,r6,r7,r8,r9,r10} is i16_bit_0003 = 0x7 & r4 & r5 & r6 & r7 & r8 & r9 & r10 {push(r4); push(r5); push(r6); push(r7); push(r8); push(r9); push (r10);}
push16list: {r4,r5,r6,r7,r8,r9,r10,r11} is i16_bit_0003 = 0x8 & r4 & r5 & r6 & r7 & r8 & r9 & r10 & r11 {push(r4); push(r5); push(r6); push(r7); push(r8); push(r9); push (r10); push(r11);}

push16lr: is i16_bit_0404 = 0b0 {}
push16lr:r15 is i16_bit_0404 = 0b1 & r15 {push(r15);}

push16sep:, i16_bit_0404 != 0b0 {}

# push
:push push16list push16lr is i16_optype = 0b00 & i16_4op = 0b0101 & i16_bit_0509 = 0b00110 & push16list & push16lr {
    build push16list;
    build push16sep;
    build push16lr;
}

pop16list: is i16_bit_0003 = 0x0 {}
pop16list: r4 is i16_bit_0003 = 0x1 & r4 {pop(r4);}
pop16list: {r4,r5} is i16_bit_0003 = 0x2 & r4 & r5 {pop(r4); pop(r5);}
pop16list: {r4,r5,r6} is i16_bit_0003 = 0x3 & r4 & r5 & r6 {pop(r4); pop(r5); pop(r6);}
pop16list: {r4,r5,r6,r7} is i16_bit_0003 = 0x4 & r4 & r5 & r6 & r7 {pop(r4); pop(r5); pop(r6); pop(r7);}
pop16list: {r4,r5,r6,r7,r8} is i16_bit_0003 = 0x5 & r4 & r5 & r6 & r7 & r8 {pop(r4); pop(r5); pop(r6); pop(r7); pop(r8);}
pop16list: {r4,r5,r6,r7,r8,r9} is i16_bit_0003 = 0x6 & r4 & r5 & r6 & r7 & r8 & r9 {pop(r4); pop(r5); pop(r6); pop(r7); pop(r8); pop(r9);}
pop16list: {r4,r5,r6,r7,r8,r9,r10} is i16_bit_0003 = 0x7 & r4 & r5 & r6 & r7 & r8 & r9 & r10 {pop(r4); pop(r5); pop(r6); pop(r7); pop(r8); pop(r9); pop (r10);}
pop16list: {r4,r5,r6,r7,r8,r9,r10,r11} is i16_bit_0003 = 0x8 & r4 & r5 & r6 & r7 & r8 & r9 & r10 & r11 {pop(r4); pop(r5); pop(r6); pop(r7); pop(r8); pop(r9); pop (r10); pop(r11);}

pop16lr: is i16_bit_0404 = 0b0 {}
pop16lr: r15 is i16_bit_0404 = 0b1 & r15 {pop(r15);}

pop16sep:, i16_bit_0404 != 0b0 {}

# pop
:pop pop16list pop16lr is i16_optype = 0b00 & i16_4op = 0b0101 & i16_bit_0509 = 0b00100 & pop16list & pop16lr {
    build pop16lr;
    build pop16sep;
    build pop16list;
    local tmp:4 = r15 & 0xfffffffe;
    return [tmp];
}
